{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"new",
				"new_direction"
			],
			[
				"chan",
				"change_direction"
			],
			[
				"sn",
				"snake"
			],
			[
				"up",
				"update_frame"
			],
			[
				"snake",
				"snake_list"
			],
			[
				"update",
				"update_rate"
			],
			[
				"tail",
				"tail_y"
			],
			[
				"hea",
				"head_y"
			],
			[
				"head",
				"head_x"
			],
			[
				"cell",
				"cells_to_change"
			],
			[
				"rever",
				"reverse"
			],
			[
				"dir",
				"direction_list"
			],
			[
				"direction",
				"direction_list"
			],
			[
				"wi",
				"window_x"
			],
			[
				"windo",
				"window_y"
			],
			[
				"clic",
				"clicked_inside"
			],
			[
				"pos",
				"pos_id"
			],
			[
				"even",
				"event_handle"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"master",
				"master_grid"
			],
			[
				"w",
				"w"
			],
			[
				"h",
				"h_iter"
			],
			[
				"mas",
				"master_row"
			],
			[
				"order",
				"order_id"
			],
			[
				"crea",
				"create_card"
			],
			[
				"Card",
				"Card_action"
			],
			[
				"WILD",
				"WILDCARD"
			],
			[
				"car",
				"card_action"
			],
			[
				"rand",
				"randint"
			],
			[
				"ra",
				"randint"
			],
			[
				"card",
				"Card_action"
			],
			[
				"Car",
				"Card_master"
			],
			[
				"deck",
				"deck_context"
			],
			[
				"re",
				"replacement_list"
			],
			[
				"repl",
				"replacement_template"
			],
			[
				"repla",
				"replacement_attractions"
			],
			[
				"replace",
				"replacement"
			],
			[
				"to",
				"total_attractions"
			],
			[
				"att",
				"attractions_list"
			],
			[
				"a",
				"attractions_list"
			],
			[
				"rem",
				"remplacement_attractions"
			],
			[
				"sor",
				"sorted_attractions"
			],
			[
				"so",
				"sorted_attractions"
			],
			[
				"attractio",
				"attraction_index"
			],
			[
				"lar",
				"largest_attractions"
			],
			[
				"day",
				"day_range"
			],
			[
				"max",
				"max_days"
			],
			[
				"num",
				"number"
			],
			[
				"ma",
				"max_days"
			],
			[
				"in",
				"indexes"
			],
			[
				"larg",
				"largest_in_window"
			],
			[
				"da",
				"day_range"
			],
			[
				"inde",
				"indexes"
			],
			[
				"ine",
				"index_list"
			],
			[
				"fr",
				"first_partners"
			],
			[
				"fi",
				"first_partners"
			],
			[
				"se",
				"second_partners"
			],
			[
				"fir",
				"first_partners"
			],
			[
				"f",
				"first_parteners_str"
			],
			[
				"gu",
				"guests_num"
			],
			[
				"gues",
				"guests_list"
			],
			[
				"fac",
				"factor_str"
			],
			[
				"guest",
				"guests_list"
			],
			[
				"rounds",
				"rounds_str"
			],
			[
				"guests",
				"guests_num"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "def check_in_range(indexes, max_days, remainder, total_attractions):\n\tindexes.sort()\n\t#print(indexes, range(len(indexes)), indexes[0])\n\n\tfor i in range(len(indexes)):\n\t\tindexes[i] += 1\n\n\tif indexes[0] > max_days:\n\t\t#print(\"too far from start\")\n\t\treturn False\n\n\t#indexes.append(total_attractions)\n\tcurrent_day = 0\n\tfor day in range(len(indexes)):\n\t\tcurrent_day += max_days\n\t\t\n\t\t#print(day, current_day)\n\t\tif day + 1 == len(indexes):\n\t\t\t#print(current_day, indexes[day], total_attractions, day)\n\t\t\tif current_day >= indexes[day] and current_day >= total_attractions:\n\t\t\t\t#print(\"found\")\n\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\t#print(\"elimated\")\n\t\t\t\treturn False\n\n\t\tif current_day >= indexes[day] and current_day < indexes[day + 1]:\n\t\t\tcontinue\n\t\telse:\n\t\t\ti = 0\n\t\t\twhile True:\n\t\t\t\tcurrent_day -= 1\n\t\t\t\tremainder -= 1\n\t\t\t\tif remainder == -1:\n\t\t\t\t\t#print(\"used too many days\")\n\t\t\t\t\treturn False\n\n\t\t\t\tif current_day >= indexes[day] and current_day < indexes[day + 1]:\n\t\t\t\t\tbreak\n\t#print(\"found\")\n\treturn True\n\ndef recursive_test(attractions_list, replacement_list, max_days, remainder, attractions):\n\treplacement_list_len = len(replacement_list)\n\tif replacement_list_len == 1:\n\t\tfor replacement in attractions_list:\n\t\t\ttest_list = []\n\t\t\tfor original_attraction in attractions_list:\n\t\t\t\tif original_attraction[1] == replacement[1]:\n\t\t\t\t\ttest_list.append(replacement_list[0][1])\n\t\t\t\telse:\n\t\t\t\t\ttest_list.append(original_attraction[1])\n\t\t\t#print(attractions_list, replacement_list, test_list)\n\t\t\tif check_in_range(test_list, max_days, remainder, attractions) == True:\n\t\t\t\tmax_sum = 0\n\t\t\t\tfor original_attraction in attractions_list:\n\t\t\t\t\tif original_attraction[1] == replacement[1]:\n\t\t\t\t\t\tmax_sum += replacement_list[0][0]\n\t\t\t\t\telse:\n\t\t\t\t\t\tmax_sum += original_attraction[0]\n\t\t\t\t#print(\"found:\", max_sum)\n\t\t\t\treturn max_sum\n\t\t#0 = none of the given combinations worked\n\t\treturn 0\n\telse:\n\t\t#print(attractions_list)\n\t\toutput = 0\n\t\tfor replacement in attractions_list:\n\t\t\ttest_list = []\n\t\t\tfor original_attraction in attractions_list:\n\t\t\t\tif original_attraction[1] == replacement[1]:\n\t\t\t\t\ttest_list.append(replacement_list[0])\n\t\t\t\telse:\n\t\t\t\t\ttest_list.append(original_attraction)\n\n\t\t\toutput = recursive_test(test_list, replacement_list[1:], max_days, remainder, attractions)\n\t\t\tif output != 0:\n\t\t\t\t#print(\"found:\", output)\n\t\t\t\treturn output\n\treturn 0\n\n\n\ndef main():\n\n\tfile = \"\"\n\tif len(sys.argv) >= 2:\n\t\tfile = sys.argv[1]\n\telse:\n\t\tfile = raw_input(\"\")\n\n\tf = open(file, \"r\")\n\tinformation_string = f.readline()\n\tinformation = information_string.split()\n\n\tattractions = int(information[0])\n\tmax_days = int(information[1])\n\n\tnumbers_string = f.readline()\n\tnumbers = numbers_string.split()\n\n\tday_range = 0\n\tif(attractions % max_days == 0):\n\t\tday_range = attractions / max_days\n\t\tlargest_in_window = 0\n\t\ttotal_points = 0\n\n\t\tfor i in range(day_range):\n\t\t\tfor number in numbers[(max_days*i):(max_days*i) + max_days]:\n\t\t\t\tif int(number) > largest_in_window:\n\t\t\t\t\tlargest_in_window = int(number)\n\n\t\t\ttotal_points += int(largest_in_window)\n\t\t\tlargest_in_window = 0\n\n\t\tprint(total_points)\n\t\treturn 0\n\telse:\n\t\tday_range = 1 + int(attractions / max_days)\n\n\tsorted_attractions = []\n\tattraction_template = [0, 0]\n\tfor i in numbers:\n\t\tsorted_attractions.append(attraction_template)\n\n\tattraction_index = 0\n\n\tfor i in numbers:\n\t\tsorted_attractions[attraction_index] = [int(i),  attraction_index]\n\t\tattraction_index += 1\n\n\tsorted_attractions.sort(reverse = True)\n\t#print(sorted_attractions)\n\t#return 0\n\n\tindex_list = []\n\tfor i in sorted_attractions[:day_range]:\n\t\tindex_list.append(i[1])\n\n\t#print(index_list, sorted_attractions[:day_range], sorted_attractions[day_range:])\n\tmax_points = 0\n\tif check_in_range(index_list, max_days, max_days - (attractions % max_days), attractions) == True:\n\t\tfor i in sorted_attractions[:day_range]:\n\t\t\tmax_points += int(i[0])\n\t\tprint(max_points)\n\t\treturn 0\n\telse:\n\t\t#print(sorted_attractions[:day_range+6])\n\t\toriginal_attractions = sorted_attractions[:day_range]\n\t\toriginal_attractions.reverse()\n\t\tattraction_index = 1\n\t\treplacement_attractions = []\n\t\tfor i in sorted_attractions[day_range:]:\n\t\t\tfor replacement in replacement_attractions:\n\t\t\t\treplacement.append(i)\n\t\t\treplacement_template = []\n\t\t\treplacement_template.append(i)\n\t\t\treplacement_attractions.insert(0, replacement_template)\n\n\t\t\t#print(\"replacement\", replacement_attractions) \n\t\t\t#print(\"template\", replacement_template, i)\n\t\t\tfor replacement in replacement_attractions:\n\t\t\t\t#print(\"using:\", replacement)\n\t\t\t\trecursive_output = recursive_test(original_attractions, replacement, max_days, max_days - (attractions % max_days), attractions)\n\t\t\t\tif recursive_output != 0:\n\t\t\t\t\tprint(recursive_output)\n\t\t\t\t\treturn 0\n\t\t#print(\"error\")\n\t\treturn 1\n\nimport sys\nif __name__ == \"__main__\":\n\tmain()",
			"file": "/home/na/Desktop/Practice/s4/s4v2.py",
			"file_size": 4739,
			"file_write_time": 132165938654228500,
			"settings":
			{
				"buffer_size": 4740,
				"line_ending": "Unix",
				"name": "def main():"
			}
		},
		{
			"file": "/home/na/Desktop/Programming/game_test/include/player.h",
			"settings":
			{
				"buffer_size": 124,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.cpp",
			"settings":
			{
				"buffer_size": 188,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/na/Desktop/Programming/game_test/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 259,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "player.cpp",
			"settings":
			{
				"buffer_size": 155,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/na/Desktop/Programming/OpenGL/ogl/tutorial01_first_window/tutorial01.cpp",
			"settings":
			{
				"buffer_size": 1878,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/na/Desktop/Programming/game_test",
		"/home/na/Desktop/Programming/game_test/src"
	],
	"file_history":
	[
		"/home/na/Desktop/Programming/game_test/CmakeLists.txt",
		"/home/na/Desktop/Programming/game_test/main.cpp",
		"/home/na/Desktop/Programming/game_test/player.cpp",
		"/home/na/Desktop/Programming/game_test/Makefile",
		"/home/na/Desktop/Programming/OpenGL/ogl/Makefile",
		"/home/na/Desktop/grid_test.py",
		"/home/na/Desktop/Zhuojun_A3Q3.py",
		"/home/na/Desktop/snakes_ladders.py",
		"/home/na/Desktop/Practice/s2.py"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"CC",
			"CFLAGS",
			"hellomake",
			"cells_to",
			"TODO",
			"print",
			"remplacement",
			"check_in_range",
			"j",
			"check_in_range"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"CXX",
			"CXXFLAGS",
			"main",
			"replacement"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/home/na/Desktop/Programming/game_test"
		}
	],
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/na/Desktop/Practice/s4/s4v2.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4740,
						"regions":
						{
						},
						"selection":
						[
							[
								1893,
								1893
							]
						],
						"settings":
						{
							"auto_name": "def main():",
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 864.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/na/Desktop/Programming/game_test/include/player.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 124,
						"regions":
						{
						},
						"selection":
						[
							[
								124,
								124
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 188,
						"regions":
						{
						},
						"selection":
						[
							[
								148,
								148
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/na/Desktop/Programming/game_test/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 259,
						"regions":
						{
						},
						"selection":
						[
							[
								104,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "player.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 155,
						"regions":
						{
						},
						"selection":
						[
							[
								33,
								33
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/na/Desktop/Programming/OpenGL/ogl/tutorial01_first_window/tutorial01.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1878,
						"regions":
						{
						},
						"selection":
						[
							[
								1785,
								1785
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 163.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
